# This is a basic workflow to help you get started with Actions

name: discordJS

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [17.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci, build and test
        run: |
          npm ci
          npm run build --if-present
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b
        uses: docker/build-push-action@v2.9.0
        with:
          # Push is a shorthand for --output=type=registry
          push: true
          # List of tags
          tags: kks518/node-web-app:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            cd ~/Informy-Bot && git pull &&
            ~/Docker/container_exec.sh $CONTAINER_NAME $USERNAME $IMAGE_NAME
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          USERNAME: ${{ secrets.USERNAME }}
          IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
